import * as Op from '../ops';
import * as Types from '../model/types';
import * as ServerApiTest from '../_external/backendProviders/serverApiTest';
import {createLocalClient} from '../main';

import {nthTestColumn, createTestTable} from './generate';

const SHOW_CG_RESULT = false;

// Produce a test case for each element in caseParams
// If caseParams is an array of non-arrays, `$p` in labelTemplate is replaced with JSON-stringified param value
// Else, `$p<index>`, e.g., `$p0`, in labelTemplate is replaced with the appropriate param value.
function testCases<T>(
  labelTemplate: string,
  caseParams: Array<T>,
  dynCGFn: (param: T) => Types.Node | Promise<Types.Node>
) {
  for (const param of caseParams) {
    let caseLabel: string = '';
    if (Array.isArray(param)) {
      caseLabel = param.reduce((label, pp, idx) => {
        return label.replace(`$p${idx}`, JSON.stringify(pp));
      }, labelTemplate);
    } else {
      caseLabel = labelTemplate.replace('$p', JSON.stringify(param));
    }

    it(caseLabel, async () => {
      let cg = null;
      const durSetup = Math.round(
        await timedMillis(async () => {
          cg = await dynCGFn(param);
        })
      );
      console.log(`${caseLabel} (setup): ${durSetup}ms`);

      let result = null;
      const dur = Math.round(
        await timedMillis(async () => {
          result = await testClient().query(cg);
        })
      );
      console.log(`${caseLabel} (evaluate): ${dur}ms`);
      if (SHOW_CG_RESULT) {
        console.log(
          `${caseLabel} (results):\n${JSON.stringify(result, null, 2)}`
        );
      }
    });
  }
}

function testCase(label: string, cgFn: () => Types.Node | Promise<Types.Node>) {
  testCases(label, [null], cgFn);
}

async function timedMillis(fn: () => Promise<void>): Promise<number> {
  const start = process.hrtime();
  await fn();
  const diff = process.hrtime(start);
  return diff[0] * 1000 + diff[1] / 1000000;
}

function testClient() {
  return createLocalClient(new ServerApiTest.Client());
}

describe('benchmarks', () => {
  describe('load rows', () => {
    testCase('load rows/1M rows, 1 column', () => {
      const table = createTestTable({
        nRows: 1000000,
        cols: [
          {
            name: () => 'value',
            value: () => ['a', 'b', 'c', 'd'][Math.floor(Math.random() * 4)],
          },
        ],
      });

      return Op.opTableRows({table});
    });

    testCases(
      'load rows/$p0 rows, $p1 columns',
      [
        [100000, 5],
        [100000, 10],
        [100000, 25],
      ],
      async ([nRows, nCols]) => {
        const cols = new Array(nCols);
        for (let i = 0; i < nCols; i++) {
          cols[i] = nthTestColumn(i);
        }

        const table = createTestTable({
          nRows,
          cols,
        });

        return Op.opTableRows({table});
      }
    );
  });
  describe('groupBy', () => {
    let table = null;

    beforeEach(() => {
      table = createTestTable({
        nRows: 100000,
        cols: [
          {
            name: () => 'card1',
            value: () => 0,
          },
          {
            name: () => 'card10',
            value: () => Math.floor(Math.random() * 10),
          },
          {
            name: () => 'card100',
            value: () => Math.floor(Math.random() * 100),
          },
          {
            name: () => 'card1000',
            value: () => Math.floor(Math.random() * 1000),
          },
        ],
      });
    });

    testCase('groupBy/100000 rows, cardinality = 1', async () => {
      return Op.opGroupby({
        arr: Op.opTableRows({table}),
        groupByFn: Op.defineFunction(
          {
            row: Types.typedDict({
              card1: 'number',
              card10: 'number',
              card100: 'number',
              card1000: 'number',
            }),
          },
          ({row}) => Op.opPick({obj: row, key: Op.constString('card1')})
        ),
      });
    });
    testCase('groupBy/100000 rows, cardinality = 10', async () => {
      return Op.opGroupby({
        arr: Op.opTableRows({table}),
        groupByFn: Op.defineFunction(
          {
            row: Types.typedDict({
              card1: 'number',
              card10: 'number',
              card100: 'number',
              card1000: 'number',
            }),
          },
          ({row}) => Op.opPick({obj: row, key: Op.constString('card10')})
        ),
      });
    });
    testCase('groupBy/100000 rows, cardinality = 100', async () => {
      return Op.opGroupby({
        arr: Op.opTableRows({table}),
        groupByFn: Op.defineFunction(
          {
            row: Types.typedDict({
              card1: 'number',
              card10: 'number',
              card100: 'number',
              card1000: 'number',
            }),
          },
          ({row}) => Op.opPick({obj: row, key: Op.constString('card100')})
        ),
      });
    });
    testCase('groupBy/100000 rows, cardinality = 1000', async () => {
      return Op.opGroupby({
        arr: Op.opTableRows({table}),
        groupByFn: Op.defineFunction(
          {
            row: Types.typedDict({
              card1: 'number',
              card10: 'number',
              card100: 'number',
              card1000: 'number',
            }),
          },
          ({row}) => Op.opPick({obj: row, key: Op.constString('card1000')})
        ),
      });
    });
  });

  describe('filter', () => {
    let table = null;
    beforeEach(() => {
      table = createTestTable({
        nRows: 100000,
        cols: [
          {
            name: () => 'card1',
            value: () => 0,
          },
          {
            name: () => 'card10',
            value: () => Math.floor(Math.random() * 10),
          },
          {
            name: () => 'card100',
            value: () => Math.floor(Math.random() * 100),
          },
          {
            name: () => 'card1000',
            value: () => Math.floor(Math.random() * 1000),
          },
        ],
      });
    });

    testCase('filter/100000 rows', async () => {
      return Op.opFilter({
        arr: Op.opTableRows({table}),
        filterFn: Op.defineFunction(
          {
            row: Types.typedDict({
              card1: 'number',
              card10: 'number',
              card100: 'number',
              card1000: 'number',
            }),
          },
          ({row}) =>
            Op.opNumberGreaterEqual({
              lhs: Op.opPick({
                obj: row,
                key: Op.constString('card10'),
              }),
              rhs: Op.constNumber(5),
            })
        ),
      });
    });
  });

  describe('sort', () => {
    testCases('sort/$p rows', [100, 1000, 10000], async nRows => {
      const table = createTestTable({
        nRows,
        cols: [
          {
            name: () => 'card1',
            value: () => 0,
          },
          {
            name: () => 'card10',
            value: () => Math.floor(Math.random() * 10),
          },
          {
            name: () => 'card100',
            value: () => Math.floor(Math.random() * 100),
          },
          {
            name: () => 'card1000',
            value: () => Math.floor(Math.random() * 1000),
          },
        ],
      });
      return Op.opSort({
        arr: Op.opTableRows({table}),
        compFn: Op.defineFunction(
          {
            row: Types.typedDict({
              card1: 'number',
              card10: 'number',
              card100: 'number',
              card1000: 'number',
            }),
          },
          ({row}) =>
            Op.opArray({
              0: Op.opPick({
                obj: row,
                key: Op.constString('card1000'),
              }),
            } as any)
        ),
        columnDirs: Op.opArray({0: Op.constString('desc')} as any) as any,
      });
    });
  });

  describe('join', () => {
    let table1 = null;
    let table2 = null;

    beforeEach(() => {
      const nRows = 10000;
      table1 = createTestTable({
        nRows,
        cols: [
          {
            name: () => 'key',
            value: idx => idx,
          },
          {
            name: () => 'label1',
            value: idx => `I am from table1 row #${idx}`,
          },
        ],
      });
      table2 = createTestTable({
        nRows,
        cols: [
          {
            name: () => 'key',
            value: idx => nRows - 1 - idx,
          },
          {
            name: () => 'label2',
            value: idx => `I am from table2 row #${nRows - 1 - idx}`,
          },
        ],
      });
    });

    testCase('join/100000 rows', async () => {
      return Op.opJoin({
        arr1: Op.opTableRows({table: table1}),
        arr2: Op.opTableRows({table: table2}),
        join1Fn: Op.defineFunction(
          {
            row: Types.typedDict({
              key: 'number',
              label1: 'string',
            }),
          },
          ({row}) => Op.opPick({obj: row, key: Op.constString('key')})
        ) as any,
        join2Fn: Op.defineFunction(
          {
            row: Types.typedDict({
              key: 'number',
              label2: 'string',
            }),
          },
          ({row}) => Op.opPick({obj: row, key: Op.constString('key')})
        ) as any,
        alias1: Op.constString('left'),
        alias2: Op.constString('right'),
        leftOuter: Op.constBoolean(true),
        rightOuter: Op.constBoolean(true),
      });
    });
  });
});
